/**
 * Definition for binary tree
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}
 * };
 */
class Solution {
public:
    
    TreeNode* dfs(int index,vector<int> &pre,vector<int> vin){
        TreeNode *node = new TreeNode(pre[index]);
        vector<int> left,right;
        int i = 0;
        for(i = 0; i < vin.size();i++){
            if(vin[i] == pre[index]){
                break;
            }
        }
        int mid = i;
        for(i = 0;i < vin.size();i++){
            if(i < mid){
                left.push_back(vin[i]);
            }
            else if(i > mid){
                right.push_back(vin[i]);
            }
        }
        if(left.size() == 1){
            TreeNode *cur = new TreeNode(left[0]);
            node->left = cur;
        }
        else if(left.size() == 0){
            return node;
        }
        else{
            for(i = 0; i < pre.size();i++){
                for(int j = 0; j < left.size();j++){
                    if(left[i] == pre[j]){
                        node->left = dfs(i,pre,left);
                        break;
                    }
                }
            }
        }
        if(right.size() == 1){
            TreeNode *cur = new TreeNode(right[0]);
            node->right = cur;
        }
        else if(right.size() == 0){
            return node;
        }
        else{
            for(i = 0; i < pre.size();i++){
                for(int j = 0; j < right.size();j++){
                    if(right[i] == pre[j]){
                        node->right = dfs(i,pre,right);
                        break;
                    }
                }
            }
        }
        return node;
    }
    TreeNode* reConstructBinaryTree(vector<int> pre,vector<int> vin) {
        if(pre.size() == 0)
            return NULL;
        return dfs(0,pre,vin);
    }
};